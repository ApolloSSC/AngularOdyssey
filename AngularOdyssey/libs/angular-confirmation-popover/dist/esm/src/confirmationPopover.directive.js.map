{"version":3,"file":"confirmationPopover.directive.js","sourceRoot":"","sources":["../../../src/confirmationPopover.directive.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Directive,\n  Input,\n  Output,\n  EventEmitter,\n  HostListener,\n  ViewContainerRef,\n  ComponentRef,\n  OnDestroy,\n  ElementRef,\n  OnChanges,\n  OnInit,\n  ReflectiveInjector,\n  ResolvedReflectiveProvider,\n  ComponentFactoryResolver,\n  Injector,\n  Inject,\n  Renderer,\n  TemplateRef,\n  ComponentFactory\n} from '@angular/core';\nimport {DOCUMENT} from '@angular/platform-browser';\nimport {ConfirmationPopoverWindow} from './confirmationPopoverWindow.component';\nimport {ConfirmationPopoverOptions, ConfirmationPopoverWindowOptions} from './confirmationPopoverOptions.provider';\nimport {Positioning} from 'positioning';\n\n/**\n * @private\n */\ninterface Coords {\n  top: number;\n  left: number;\n}\n\n/**\n * All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):\n * ```\n * <button\n *  class=\"btn btn-default\"\n *  mwlConfirmationPopover\n *  [title]=\"title\"\n *  [message]=\"message\"\n *  placement=\"left\"\n *  (confirm)=\"confirmClicked = true\"\n *  (cancel)=\"cancelClicked = true\"\n *  [(isOpen)]=\"isOpen\">\n *   Show confirm popover!\n * </button>\n * ```\n */\n\nexport class ConfirmationPopover implements OnDestroy, OnChanges, OnInit {\n\n  /**\n   * The title of the popover.\n   * Note, if you use an expression, you may want to consider using \"data-title\" instead of \"title\" so\n   * that the browser doesn't show native tooltips with the angular expression listed.\n   */\n   title: string;\n\n  /**\n   * The body text of the popover.\n   */\n   message: string;\n\n  /**\n   * The text of the confirm button. Default `Confirm`\n   */\n   confirmText: string;\n\n  /**\n   * The text of the cancel button. Default `Cancel`\n   */\n   cancelText: string;\n\n  /**\n   * The placement of the popover. It can be either `top`, `right`, `bottom` or `left`. Default `top`\n   */\n   placement: string;\n\n  /**\n   * The bootstrap button type of the confirm button. It can be any supported bootstrap color type\n   * e.g. `default`, `warning`, `danger` etc. Default `success`\n   */\n   confirmButtonType: string;\n\n  /**\n   * The bootstrap button type of the cancel button. It can be any supported bootstrap color type\n   * e.g. `default`, `warning`, `danger` etc. Default `default`\n   */\n   cancelButtonType: string;\n\n  /**\n   * Set to either `confirm` or `cancel` to focus the confirm or cancel button.\n   * If omitted, by default it will not focus either button.\n   */\n   focusButton: string;\n\n  /**\n   * Whether to hide the confirm button. Default `false`.\n   */\n   hideConfirmButton: boolean = false;\n\n  /**\n   * Whether to hide the cancel button. Default `false`.\n   */\n   hideCancelButton: boolean = false;\n\n  /**\n   * Whether to disable showing the popover. Default `false`.\n   */\n   isDisabled: boolean = false;\n\n  /**\n   * Will open or show the popover when changed.\n   * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]=\"isOpen\"`\n   */\n   isOpen: boolean = false;\n\n  /**\n   * A reference to a <template> tag that if set will override the popovers template. Use like so:\n   * <template #customTemplate let-options=\"options\">\n   *   <div [class]=\"'popover ' + options.placement\" style=\"display: block\">\n   *     My custom template\n   *   </div>\n   * </template>\n   *\n   * Then pass customTemplate to the mwlConfirmationPopover directive like so `[customTemplate]=\"customTemplate\"`\n   */\n   customTemplate: TemplateRef<any>;\n\n  /**\n   * Will emit when the popover is opened or closed\n   */\n   isOpenChange: EventEmitter<any> = new EventEmitter(true);\n\n  /**\n   * An expression that is called when the confirm button is clicked.\n   */\n   confirm: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * An expression that is called when the cancel button is clicked.\n   */\n   cancel: EventEmitter<any> = new EventEmitter();\n\n  /**\n   * A custom CSS class to be added to the popover\n   */\n   popoverClass: string;\n\n  /**\n   * Append the element to the document body rather than the trigger element\n   */\n   appendToBody: boolean = false;\n\n  /**\n   * @private\n   */\n  popover: ComponentRef<ConfirmationPopoverWindow> = null;\n\n  /**\n   * @private\n   */\n  constructor(\n    private viewContainerRef: ViewContainerRef,\n    private elm: ElementRef,\n    private defaultOptions: ConfirmationPopoverOptions,\n    private cfr: ComponentFactoryResolver,\n    private position: Positioning,\n    private renderer: Renderer,\n     private document //tslint:disable-line\n  ) {}\n\n  /**\n   * @private\n   */\n  ngOnInit(): void {\n    this.isOpenChange.emit(false);\n  }\n\n  /**\n   * @private\n   */\n  ngOnChanges(changes: any): void {\n    if (changes.isOpen) {\n      if (changes.isOpen.currentValue === true) {\n        this.showPopover();\n      } else {\n        this.hidePopover();\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  ngOnDestroy(): void {\n    this.hidePopover();\n  }\n\n  /**\n   * @private\n   */\n  onConfirm(): void {\n    this.confirm.emit(null);\n    this.hidePopover();\n  }\n\n  /**\n   * @private\n   */\n  onCancel(): void {\n    this.cancel.emit(null);\n    this.hidePopover();\n  }\n\n  /**\n   * @private\n   */\n  \n  \n  onDocumentClick(target: HTMLElement): void {\n\n    if (this.popover && !this.elm.nativeElement.contains(target) && !this.popover.location.nativeElement.contains(target)) {\n      this.hidePopover();\n    }\n  }\n\n  /**\n   * @private\n   */\n  \n  togglePopover(): void {\n    if (!this.popover) {\n      this.showPopover();\n    } else {\n      this.hidePopover();\n    }\n  }\n\n  /**\n   * @private\n   */\n  \n  onResize(): void {\n    this.positionPopover();\n  }\n\n  private showPopover(): void {\n    if (!this.popover && !this.isDisabled) {\n\n      const options: ConfirmationPopoverWindowOptions = new ConfirmationPopoverWindowOptions();\n      Object.assign(options, this.defaultOptions, {\n        title: this.title,\n        message: this.message,\n        onConfirm: (): void => {\n          this.onConfirm();\n        },\n        onCancel: (): void => {\n          this.onCancel();\n        },\n        onAfterViewInit: () : void => {\n          this.positionPopover();\n        }\n      });\n\n      const optionalParams: string[] = [\n        'confirmText',\n        'cancelText',\n        'placement',\n        'confirmButtonType',\n        'cancelButtonType',\n        'focusButton',\n        'hideConfirmButton',\n        'hideCancelButton',\n        'popoverClass',\n        'appendToBody',\n        'customTemplate'\n      ];\n      optionalParams.forEach(param => {\n        if (this[param]) {\n          options[param] = this[param];\n        }\n      });\n\n      const componentFactory: ComponentFactory<ConfirmationPopoverWindow> = this.cfr.resolveComponentFactory(ConfirmationPopoverWindow);\n      const binding: ResolvedReflectiveProvider[] = ReflectiveInjector.resolve([{\n        provide: ConfirmationPopoverWindowOptions,\n        useValue: options\n      }]);\n      const contextInjector: Injector = this.viewContainerRef.parentInjector;\n      const childInjector: Injector = ReflectiveInjector.fromResolvedProviders(binding, contextInjector);\n      this.popover = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);\n      if (this.appendToBody) {\n        this.renderer.invokeElementMethod(this.document.body, 'appendChild', [this.popover.location.nativeElement]);\n      }\n      this.isOpenChange.emit(true);\n\n    }\n  }\n\n  private positionPopover(): void {\n    if (this.popover) {\n      const popoverElement: HTMLElement = this.popover.location.nativeElement.children[0];\n      const popoverPosition: Coords = this.position.positionElements(\n        this.elm.nativeElement,\n        popoverElement,\n        this.placement || this.defaultOptions.placement,\n        this.appendToBody || this.defaultOptions.appendToBody\n      );\n      this.renderer.setElementStyle(popoverElement, 'top', `${popoverPosition.top}px`);\n      this.renderer.setElementStyle(popoverElement, 'left', `${popoverPosition.left}px`);\n    }\n  }\n\n  private hidePopover(): void {\n    if (this.popover) {\n      this.popover.destroy();\n      this.popover = null;\n      this.isOpenChange.emit(false);\n    }\n  }\n\nstatic decorators: DecoratorInvocation[] = [\n{ type: Directive, args: [{\n  selector: '[mwlConfirmationPopover]'\n}, ] },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n{type: ViewContainerRef, },\n{type: ElementRef, },\n{type: ConfirmationPopoverOptions, },\n{type: ComponentFactoryResolver, },\n{type: Positioning, },\n{type: Renderer, },\n{type: undefined, decorators: [{ type: Inject, args: [DOCUMENT, ] }, ]},\n];\nstatic propDecorators: {[key: string]: DecoratorInvocation[]} = {\n'title': [{ type: Input },],\n'message': [{ type: Input },],\n'confirmText': [{ type: Input },],\n'cancelText': [{ type: Input },],\n'placement': [{ type: Input },],\n'confirmButtonType': [{ type: Input },],\n'cancelButtonType': [{ type: Input },],\n'focusButton': [{ type: Input },],\n'hideConfirmButton': [{ type: Input },],\n'hideCancelButton': [{ type: Input },],\n'isDisabled': [{ type: Input },],\n'isOpen': [{ type: Input },],\n'customTemplate': [{ type: Input },],\n'isOpenChange': [{ type: Output },],\n'confirm': [{ type: Output },],\n'cancel': [{ type: Output },],\n'popoverClass': [{ type: Input },],\n'appendToBody': [{ type: Input },],\n'onDocumentClick': [{ type: HostListener, args: ['document:click', ['$event.target'], ] },{ type: HostListener, args: ['document:touchend', ['$event.target'], ] },],\n'togglePopover': [{ type: HostListener, args: ['click', ] },],\n'onResize': [{ type: HostListener, args: ['window:resize', ] },],\n};\n}\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}